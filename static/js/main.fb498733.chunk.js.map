{"version":3,"sources":["components/FriendCard/index.js","components/Nav/index.js","components/Title/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["FriendCard","props","className","alt","name","src","image","onClick","handleClick","id","Nav","class","href","result","score","topScore","Title","children","Wrapper","App","state","friends","currentScore","clicked","indexOf","handleIncrement","setState","concat","handleReset","newScore","handleShuffle","shuffledFriends","array","i","length","j","Math","floor","random","shuffle","title","this","map","friend","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uyFAmBeA,MAhBf,SAAoBC,GAClB,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,iBACb,yBAAKC,IAAKF,EAAMG,KAAMC,IAAKJ,EAAMK,SAEnC,yBAAKJ,UAAU,YAGf,0BAAMK,QAAS,kBAAMN,EAAMO,YAAYP,EAAMQ,KAAKP,UAAU,UAA5D,kB,MCYSQ,MArBf,SAAaT,GACX,OACA,6BACA,6BACE,4BAEE,wBAAIU,MAAM,SACV,uBAAGC,KAAK,KAAR,gBAIA,wBAAID,MAAM,UAAUV,EAAMY,QAE1B,wBAAIJ,GAAG,SAAP,kBAA+BR,EAAMa,MAArC,iBAA0Db,EAAMc,c,MCTvDC,MAJf,SAAef,GACb,OAAO,wBAAIC,UAAU,SAASD,EAAMgB,W,MCGvBC,MAJf,SAAiBjB,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAMgB,W,ICiG1BE,E,2MAlFfC,MAAQ,CACNC,UACAC,aAAc,EACdP,SAAU,EACVF,OAAQ,GACRU,QAAS,I,EAGXf,YAAc,SAAAC,IAC4B,IAApC,EAAKW,MAAMG,QAAQC,QAAQf,IAC7B,EAAKgB,kBACL,EAAKC,SAAS,CAAEH,QAAS,EAAKH,MAAMG,QAAQI,OAAOlB,MAEnD,EAAKmB,e,EAITH,gBAAkB,WAChB,IAAMI,EAAW,EAAKT,MAAME,aAAe,EAC3C,EAAKI,SAAS,CACZJ,aAAcO,EACdhB,OAAQ,KAENgB,GAAY,EAAKT,MAAML,SACzB,EAAKW,SAAS,CAAEX,SAAUc,IAEN,KAAbA,GACP,EAAKH,SAAS,CAAEb,OAAQ,WAE1B,EAAKiB,iB,EAGPF,YAAc,WACZ,EAAKF,SAAS,CACZJ,aAAc,EACdP,SAAU,EAAKK,MAAML,SACrBF,OAAQ,QACRU,QAAS,KAEX,EAAKO,iB,EAGPA,cAAgB,WACd,IAAIC,EAtDN,SAAiBC,GACf,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADC,EAElB,CAACD,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFkC,KAE9BD,EAAMG,GAFwB,KAI3C,OAAOH,EAiDeO,CAAQlB,GAC9B,EAAKK,SAAS,CAAEL,QAASU,K,wEAGjB,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CACES,MAAM,uBACN1B,MAAO2B,KAAKrB,MAAME,aAClBP,SAAU0B,KAAKrB,MAAML,SACrBF,OAAQ4B,KAAKrB,MAAMP,SAGrB,kBAAC,EAAD,qDAIK4B,KAAKrB,MAAMC,QAAQqB,KAAI,SAAAC,GAAM,OAE1B,kBAAC,EAAD,CACEC,IAAKD,EAAOlC,GACZD,YAAa,EAAKA,YAClBiB,gBAAiB,EAAKA,gBACtBG,YAAa,EAAKA,YAClBE,cAAe,EAAKA,cACpBrB,GAAIkC,EAAOlC,GACXH,MAAOqC,EAAOrC,gB,GAxEZuC,aCLEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.fb498733.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction FriendCard(props) {\n  return (\n    <div className=\"card\">\n      <div className=\"img-container\">\n        <img alt={props.name} src={props.image} />\n      </div>\n      <div className=\"content\">\n\n      </div>\n      <span onClick={() => props.handleClick(props.id)} className=\"remove\">\n        ùòÖ\n      </span>\n    </div>\n  );\n}\n\nexport default FriendCard;\n","import React from \"react\";\nimport \"./Nav.css\";\n\nfunction Nav(props){\n  return(\n  <div>\n  <nav>\n    <ul>\n\n      <li class=\"brand\">\n      <a href=\"/\">Clicky Game</a>\n      </li>\n\n\n      <li class=\"result\">{props.result}</li>\n\n      <li id=\"score\">Current Score: {props.score} | Top Score: {props.topScore}</li>\n\n    </ul>\n  </nav>\n  </div>\n);\n}\n\nexport default Nav;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n\nexport default Title;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React, { Component } from \"react\";\nimport './App.css';\nimport friends from \"./friends.json\";\nimport FriendCard from \"./components/FriendCard\";\nimport Nav from \"./components/Nav\";\nimport Title from \"./components/Title\";\nimport Wrapper from \"./components/Wrapper\";\n\nfunction shuffle(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n};\n\n\nclass App extends Component {\n  // Set this.state\nstate = {\n  friends,\n  currentScore: 0,\n  topScore: 0,\n  result: \"\",\n  clicked: [],\n};\n\nhandleClick = id => {\n  if (this.state.clicked.indexOf(id) === -1) {\n    this.handleIncrement();\n    this.setState({ clicked: this.state.clicked.concat(id) });\n  } else {\n    this.handleReset();\n  }\n};\n\nhandleIncrement = () => {\n  const newScore = this.state.currentScore + 1;\n  this.setState({\n    currentScore: newScore,\n    result: \"\"\n  });\n  if (newScore >= this.state.topScore) {\n    this.setState({ topScore: newScore });\n  }\n  else if (newScore === 10) {\n    this.setState({ result: \"WINNER\" });\n  }\n  this.handleShuffle();\n};\n\nhandleReset = () => {\n  this.setState({\n    currentScore: 0,\n    topScore: this.state.topScore,\n    result: \"LOSER\",\n    clicked: []\n  });\n  this.handleShuffle();\n};\n\nhandleShuffle = () => {\n  let shuffledFriends = shuffle(friends);\n  this.setState({ friends: shuffledFriends });\n};\n\nrender() {\n  return (\n    <Wrapper>\n      <Nav\n        title=\"Simpsons Clicky Game\"\n        score={this.state.currentScore}\n        topScore={this.state.topScore}\n        result={this.state.result}\n      />\n\n      <Title>\n        Click the characters, don't click duplicates\n      </Title>\n\n          {this.state.friends.map(friend => (\n\n              <FriendCard\n                key={friend.id}\n                handleClick={this.handleClick}\n                handleIncrement={this.handleIncrement}\n                handleReset={this.handleReset}\n                handleShuffle={this.handleShuffle}\n                id={friend.id}\n                image={friend.image}\n              />\n          ))}\n\n    </Wrapper>\n  );\n}\n\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}